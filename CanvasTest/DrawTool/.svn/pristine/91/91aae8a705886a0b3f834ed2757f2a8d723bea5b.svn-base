using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Drawing;
using System.Data;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using DrawTool.Controller;
using DrawTool.DrawObjects;
using DrawTool.Observer;

namespace DrawTool.DrawBox
{
    public partial class UserControl_DrawBox : UserControl, IObserver
    {
        private DrawObject resizedObject;
        private int resizedObjectHandle;
        private Point startPoint = new Point(0, 0);
        private Point lastPoint = new Point(0, 0);
        private Point oldPoint;


        public UserControl_DrawBox()
        {
            InitializeComponent();

            this.SetStyle(ControlStyles.AllPaintingInWmPaint, true);
            this.SetStyle(ControlStyles.UserPaint, true);
            this.SetStyle(ControlStyles.OptimizedDoubleBuffer, true);
            this.SetStyle(ControlStyles.SupportsTransparentBackColor, true);
            this.SetStyle(ControlStyles.DoubleBuffer, true);
            this.UpdateStyles();
            this.DoubleBuffered = true;


            MainController.Instance.Subscribe(this);
           
        }

        public void OnNext(ObserverAction action)
        {
            if (action == ObserverAction.Notify)
            {
                this.Invalidate(false);
            }
        }

        #region DrawBox 크기 조절 이벤트
        bool allowResize = false;
        private void pictureBox_ReSize_MouseDown(object sender, MouseEventArgs e)
        {
            allowResize = true;
        }

        private void pictureBox_ReSize_MouseMove(object sender, MouseEventArgs e)
        {
            if (allowResize)
            {
                this.Height = pictureBox_ReSize.Top + e.Y;
                this.Width = pictureBox_ReSize.Left + e.X;
            }
        }

        private void pictureBox_ReSize_MouseUp(object sender, MouseEventArgs e)
        {
            allowResize = false;           
        }
        #endregion


        private void UnSelectAll()
        {
            foreach (DrawObject o in MainController.Instance.GrapList)
            {
                o.Selected = false;
            }
        }

        private void UserControl_DrawBox_MouseDown(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left && MainController.Instance.DrawObjectType == DrawObjectType.Select)
            {
                MainController.Instance.SelectMode = SelectMode.None;

                foreach (DrawObject ob in MainController.Instance.GrapList)
                {
                    int handleNumber = ob.HitTest(e.Location);

                    if (handleNumber > 0)
                    {
                        MainController.Instance.SelectMode = SelectMode.Size;

                        resizedObject = ob;
                        resizedObjectHandle = handleNumber;

                        UnSelectAll();

                        ob.Selected = true;

                        break;
                    }
                }

                if (MainController.Instance.SelectMode == SelectMode.None)
                {

                    foreach (DrawObject o in MainController.Instance.GrapList)
                    {
                        if (o.HitTest(e.Location) == 0)
                        {

                            if ((Control.ModifierKeys & Keys.Control) == 0 && !o.Selected)
                            {
                                UnSelectAll();
                                o.Selected = true;


                            }
                            else if ((Control.ModifierKeys & Keys.Control) != 0 && o.Selected)
                            {
                                o.Selected = false;
                            }
                            else
                            {

                                o.Selected = true;
                            }

                            this.Cursor = Cursors.SizeAll;

                            MainController.Instance.SelectMode = SelectMode.Move;

                            break;
                        }
                    }
                }


                if (MainController.Instance.SelectMode == SelectMode.None)
                {

                    if ((Control.ModifierKeys & Keys.Control) == 0)
                        UnSelectAll();

                    MainController.Instance.SelectMode = SelectMode.NetSelection;

                }

                lastPoint.X = e.X;
                lastPoint.Y = e.Y;
                startPoint.X = e.X;
                startPoint.Y = e.Y;

                this.Capture = true;


                if (MainController.Instance.SelectMode == SelectMode.NetSelection)
                {
                    ControlPaint.DrawReversibleFrame(this.RectangleToScreen(RectangleObject.GetNormalizedRectangle(startPoint, lastPoint)), Color.Black, FrameStyle.Dashed);
                }
            }


            
            else if (e.Button == MouseButtons.Left && !(MainController.Instance.DrawObjectType == DrawObjectType.Select))
            {

                UnSelectAll();
           
                MainController.Instance.GrapList.Insert(0, AddNewDrawObject(MainController.Instance.DrawObjectType, e.Location));

                this.Capture = true;
            }

        }


        private DrawObject AddNewDrawObject(DrawObjectType type, Point location)
        {     


            switch (type)
            {
                case DrawObjectType.Rectangle : return new RectangleObject(location.X, location.Y, 1, 1);
                case DrawObjectType.Ellipse : return new EllipseObject(location.X, location.Y, 1, 1);
                case DrawObjectType.Line: return new LineObject(location.X, location.Y, location.X + 1, location.Y + 1);
                case DrawObjectType.Pencil: lastX = location.X;
                    lastY = location.Y; return newPencil = new PencilObejct(location.X, location.Y, location.X + 1, location.Y + 1);

            }

            return new RectangleObject(location.X, location.Y, 1, 1);
        }


        private int lastX;
        private int lastY;
        private PencilObejct newPencil;
        private const int minDistance = 15 * 15;

        private void UserControl_DrawBox_MouseMove(object sender, MouseEventArgs e)
        {
            oldPoint = lastPoint;

            if (e.Button == MouseButtons.Left && MainController.Instance.DrawObjectType != DrawObjectType.Select)
            {
                if (MainController.Instance.DrawObjectType == DrawObjectType.Pencil && newPencil !=null)
                {
                    Point point = new Point(e.X, e.Y);
                    int distance = (e.X - lastX) * (e.X - lastX) + (e.Y - lastY) * (e.Y - lastY);

                    if (distance < minDistance)
                    {
                        // Distance between last two points is less than minimum -
                        // move last point
                        newPencil.MoveHandleTo(point, newPencil.HandleCount);
                    }
                    else
                    {
                        // Add new point
                        newPencil.AddPoint(e.Location);
                        lastX = e.X;
                        lastY = e.Y;
                    }
                }
                else
                {
                    MainController.Instance.GrapList[0].MoveHandleTo(e.Location, 5);
                }
                this.Invalidate(false);
                return;
            }
            else if (e.Button == MouseButtons.Left && MainController.Instance.DrawObjectType == DrawObjectType.Select)
            {
                int dx = e.X - lastPoint.X;
                int dy = e.Y - lastPoint.Y;

                lastPoint.X = e.X;
                lastPoint.Y = e.Y;

                    
                if (MainController.Instance.SelectMode == SelectMode.Size)
                {
                    if (resizedObject != null)
                    {
                        resizedObject.MoveHandleTo(e.Location, resizedObjectHandle);

                        this.Invalidate(false);

                        return;
                    }
                }


                if (MainController.Instance.SelectMode == SelectMode.Move)
                {
                    foreach (DrawObject o in MainController.Instance.GrapList)
                    {
                        if (o.Selected)
                        {
                            o.Move(dx, dy);
                        }
                    }

                    this.Cursor = Cursors.SizeAll;

                    this.Invalidate(false);

                    return;
                }

                if (MainController.Instance.SelectMode == SelectMode.NetSelection)
                {

                    ControlPaint.DrawReversibleFrame(
                        this.RectangleToScreen(RectangleObject.GetNormalizedRectangle(startPoint, oldPoint)),
                        Color.Black,
                        FrameStyle.Dashed);


                    ControlPaint.DrawReversibleFrame(
                        this.RectangleToScreen(RectangleObject.GetNormalizedRectangle(startPoint, e.Location)),
                        Color.Black,
                        FrameStyle.Dashed);

                    return;
                }
            }
            else if(e.Button == System.Windows.Forms.MouseButtons.None && MainController.Instance.DrawObjectType == DrawObjectType.Select)
            {
                foreach (DrawObject ob in MainController.Instance.GrapList)
                {
                    Cursor = ob.GetHandleCursor(ob.HitTest(e.Location));
                    return;
                }
            }
        }

        private void UserControl_DrawBox_MouseUp(object sender, MouseEventArgs e)
        {
            if (e.Button == MouseButtons.Left && !(MainController.Instance.DrawObjectType == DrawObjectType.Select))
            {
               

                MainController.Instance.SelectMode = SelectMode.None;
                MainController.Instance.GrapList[0].Normalize();

                newPencil = null;

              
            }
            else
            {
                if (MainController.Instance.SelectMode == SelectMode.NetSelection)
                {
                    

                    ControlPaint.DrawReversibleFrame(
                        this.RectangleToScreen(RectangleObject.GetNormalizedRectangle(startPoint, lastPoint)),
                        Color.Black,
                        FrameStyle.Dashed);

                    UnSelectAll();

                    Rectangle rec = RectangleObject.GetNormalizedRectangle(startPoint, lastPoint);

                    foreach (DrawObject o in MainController.Instance.GrapList)
                    {
                        if (o.IntersectsWith(rec))
                            o.Selected = true;
                    }

                    MainController.Instance.SelectMode = SelectMode.None;
                }
                           
                if (resizedObject != null)
                {

                    resizedObject.Normalize();
                    resizedObject = null;
                }

               

                this.Invalidate(false);
            }

            this.Capture = false;
        }

        private void UserControl_DrawBox_Paint(object sender, PaintEventArgs e)
        {
            if (MainController.Instance.GrapList.Count > 0)
            {
                using (SolidBrush brush = new SolidBrush(Color.FromArgb(255, 255, 255)))
                {
                    e.Graphics.FillRectangle(brush,
                        this.ClientRectangle);

                    foreach (DrawObject ob in MainController.Instance.GrapList)
                    {
                        ob.Draw(e.Graphics);

                        if (ob.Selected == true)
                        {
                            ob.DrawTracker(e.Graphics);
                        }

                    }

                }

            }         
        }
    }
}
